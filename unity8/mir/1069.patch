From 03a42651feb16328efc1639ad41f9e1e7cad9ba1 Mon Sep 17 00:00:00 2001
From: Christopher James Halse Rogers <christopher.halse.rogers@canonical.com>
Date: Fri, 8 Nov 2019 16:45:00 +1100
Subject: [PATCH] =?UTF-8?q?Fix=20build=20against=20GMock/GTest=20=E2=89=A5?=
 =?UTF-8?q?=201.9?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 cmake/FindGtestGmock.cmake                                    | 1 +
 tests/include/gmock_set_arg.h                                 | 4 ++--
 tests/include/mir/test/gmock_fixes.h                          | 3 +++
 tests/include/mir/test/input_config_matchers.h                | 4 ++--
 .../unit-tests/graphics/offscreen/test_offscreen_display.cpp  | 4 ++--
 5 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/cmake/FindGtestGmock.cmake b/cmake/FindGtestGmock.cmake
index 576dcd0811..976431238a 100644
--- a/cmake/FindGtestGmock.cmake
+++ b/cmake/FindGtestGmock.cmake
@@ -62,6 +62,7 @@ if (EXISTS ${GMOCK_SOURCE})
     find_path(GMOCK_INCLUDE_DIR gmock/gmock.h PATHS /usr/src/googletest/googlemock/include)
 
     add_library(GMock STATIC ${GMOCK_SOURCE})
+    target_link_libraries(GMock ${GTEST_LIBRARY})
 
     if (EXISTS /usr/src/googletest/googlemock/src)
         set_source_files_properties(${GMOCK_SOURCE} PROPERTIES COMPILE_FLAGS "-I/usr/src/googletest/googlemock")
diff --git a/tests/include/gmock_set_arg.h b/tests/include/gmock_set_arg.h
index e504972492..f5c212b728 100644
--- a/tests/include/gmock_set_arg.h
+++ b/tests/include/gmock_set_arg.h
@@ -34,8 +34,8 @@ class SetArgumentAction {
 
   template <typename Result, typename ArgumentTuple>
   void Perform(const ArgumentTuple& args) const {
-    CompileAssertTypesEqual<void, Result>();
-    ::std::tr1::get<N>(args) = value_;
+    static_assert(std::is_same<void, Result>::value, "Action must have void Result");
+    ::std::get<N>(args) = value_;
   }
 
  private:
diff --git a/tests/include/mir/test/gmock_fixes.h b/tests/include/mir/test/gmock_fixes.h
index 0c69e8090e..35fb8e1157 100644
--- a/tests/include/mir/test/gmock_fixes.h
+++ b/tests/include/mir/test/gmock_fixes.h
@@ -37,9 +37,11 @@
 
 #include <memory>
 #include <gmock/gmock.h>
+#include "check_gtest_version.h"
 
 namespace testing
 {
+#if !GTEST_AT_LEAST(1, 8, 1) // This is conservative, but that's fine.
 namespace internal
 {
 
@@ -99,6 +101,7 @@ class ActionResultHolder<std::unique_ptr<T, D>>
 };
 
 }
+#endif // GTEST_AT_LEAST(1, 8, 1)
 
 template<typename T>
 class DefaultValue<std::unique_ptr<T, std::default_delete<T>>> {
diff --git a/tests/include/mir/test/input_config_matchers.h b/tests/include/mir/test/input_config_matchers.h
index 6f1f562ddd..75d88f591f 100644
--- a/tests/include/mir/test/input_config_matchers.h
+++ b/tests/include/mir/test/input_config_matchers.h
@@ -61,7 +61,7 @@ class InputConfigElementsMatcher
 
     virtual bool MatchAndExplain(MirInputConfig const& container, MatchResultListener* listener) const
     {
-        ::std::vector<string> element_printouts;
+        ::std::vector<std::string> element_printouts;
         MatchMatrix matrix = AnalyzeElements(container, &element_printouts, listener);
 
         const size_t actual_count = matrix.LhsSize();
@@ -91,7 +91,7 @@ class InputConfigElementsMatcher
     typedef ::std::vector<Matcher<const Element&>> MatcherVec;
 
     MatchMatrix AnalyzeElements(MirInputConfig const& config,
-                                ::std::vector<string>* element_printouts,
+                                ::std::vector<std::string>* element_printouts,
                                 MatchResultListener* listener) const
     {
         element_printouts->clear();
diff --git a/tests/unit-tests/graphics/offscreen/test_offscreen_display.cpp b/tests/unit-tests/graphics/offscreen/test_offscreen_display.cpp
index 6dc6cde21b..41c2f5b778 100644
--- a/tests/unit-tests/graphics/offscreen/test_offscreen_display.cpp
+++ b/tests/unit-tests/graphics/offscreen/test_offscreen_display.cpp
@@ -111,12 +111,12 @@ TEST_F(OffscreenDisplayTest, makes_fbo_current_rendering_target)
     std::vector<int> contexts;
     EXPECT_CALL(mock_egl, eglCreateContext(_,_,_,_))
         .Times(AtLeast(1))
-        .WillRepeatedly(WithoutArgs(Invoke(
+        .WillRepeatedly(InvokeWithoutArgs(
             [&] ()
             {
                 contexts.push_back(0);
                 return reinterpret_cast<EGLContext>(&contexts.back());
-            })));
+            }));
 
     mgo::Display display{
         native_display,
