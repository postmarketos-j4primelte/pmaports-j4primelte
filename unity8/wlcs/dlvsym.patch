diff --git a/CMakeLists.txt b/CMakeLists.txt
index b421139..ded28ad 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -47,6 +47,29 @@ if (HAVE_W_GNU_VARIADIC_MACROS)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error=gnu-zero-variadic-macro-arguments")
 endif ()
 
+include(CheckCXXSymbolExists)
+check_cxx_symbol_exists("dlvsym" "dlfcn.h" HAS_DLVSYM)
+check_cxx_symbol_exists("dlsym" "dlfcn.h" HAS_DLSYM)
+
+if (NOT HAS_DLVSYM)
+  if (NOT HAS_DLSYM)
+    message(
+      FATAL_ERROR
+      "Could not detect dlvsym or dlsym"
+    )
+  endif()
+
+  set_source_files_properties (
+    "src/shared_library.cpp"
+    PROPERTIES COMPILE_DEFINITIONS WLCS_DONT_USE_DLVSYM="1"
+  )
+
+  message(
+    WARNING
+    "dlvsym() not supported by libc. wlcs may attempt to load ABI-incompatible platform modules"
+  )
+endif()
+
 find_package(Boost)
 find_package(GtestGmock)
 pkg_check_modules(WAYLAND_CLIENT REQUIRED wayland-client)
diff --git a/src/shared_library.cpp b/src/shared_library.cpp
index 9b4dd3b..ad9b71b 100644
--- a/src/shared_library.cpp
+++ b/src/shared_library.cpp
@@ -56,6 +56,15 @@ void* wlcs::SharedLibrary::load_symbol(char const* function_name) const
 
 void* wlcs::SharedLibrary::load_symbol(char const* function_name, char const* version) const
 {
+    // Some libc implementations (such as musl) do not support dlvsym
+
+#ifdef WLCS_DONT_USE_DLVSYM
+    // Load the function without checking the version
+    //log_debug("Cannot check \"%s\" symbol version is \"%s\": dlvsym() is unavailable", function_name, version);
+    return load_symbol(function_name);
+    // Suppress unused argument warning
+    (void)version;
+#else
     if (void* result = dlvsym(so, function_name, version))
     {
         return result;
@@ -64,4 +73,5 @@ void* wlcs::SharedLibrary::load_symbol(char const* function_name, char const* ve
     {
         BOOST_THROW_EXCEPTION(std::runtime_error(dlerror()));
     }
+#endif
 }
